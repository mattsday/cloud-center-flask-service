#!/bin/bash
# This service sets up and installs the libraries needed for Python Flask and
# configures Apache to set up a wsgi gateway on CentOS, Red Hat, Debian and Ubuntu
#
# Copyright 2016 Cisco Systems
# Author Matt Day
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice, original author and this notice are preserved. This file is
# offered as-is, without any warranty.

# Load cloud centre libraries and logging:
exec > >(tee -a /usr/local/osmosix/logs/service.log) 2>&1
OSSVC_HOME=/usr/local/osmosix/service
. /usr/local/osmosix/etc/.osmosix.sh
. /usr/local/osmosix/etc/userenv
. $OSSVC_HOME/utils/cfgutil.sh
. $OSSVC_HOME/utils/install_util.sh
. $OSSVC_HOME/utils/os_info_util.sh

# Detect the OS we're running
if [[ -x /usr/bin/apt-get ]]; then
	FLAVOUR="debian"
	PACKAGES="python-flask python curl apache2 libapache2-mod-wsgi unzip"
	PKG_INSTALL="apt-get -y install"
	PKG_UPDATE="apt-get -y update"
	PKG_UPGRADE="apt-get -y upgrade"
	HTTPD_SERVICE=apache2
elif [[ -x /usr/bin/yum ]]; then
	FLAVOUR="redhat"
	PACKAGES="python-flask python curl httpd mod_wsgi unzip"
	PKG_INSTALL="yum -y install"
	PKG_UPDATE="yum -y update"
	PKG_UPGRADE=""
	HTTPD_SERVICE=httpd
else
	log [ERROR] Cannot detect operating system
	# Error out - can't detect OS!
	exit 1
fi

upgrade() {
	log "[UPGRADE] Updating OS with command $PKG_UPDATE"
	$PKG_UPDATE
	# Debian requires two commands update & upgrade, so run them both
	if [ "$FLAVOUR" = debian ]; then
		log "[UPGRADE] Upgrading OS with command $PKG_UPGRADE"
		$PKG_UPGRADE
	fi
}

# Update the OS and install the needed libraries
install() {
	log [INSTALL] Requesting OS upgrade
	# Run OS upgrade
	upgrade
	# Install needed packages
	log "[INSTALL] Installing required packages with command $PKG_INSTALL $PACKAGES"
	$PKG_INSTALL $PACKAGES

	# Debian based distros need to explicitly enable the new mods etc
	if [[ "$FLAVOUR" = debian ]]; then
		log [INSTALL] Running debian-flavour specific commands
		# Enable wsgi module and disable default vhost
		a2enmod wsgi
		a2dissite 000-default default-ssl
		# Make sure the apache service is stopped
	fi
	log '[INSTALL] Stopping httpd service (in case it is enabled)'
	service $HTTPD_SERVICE stop
}

deploy() {
	curl -o flaskapp.zip "$SCRIPT_LOCATION"
	WEB_ROOT="/var/www/flaskapp"
	APP_NAME=`echo $SCRIPT_NAME | sed 's/\.py$//'`

	if [[ "$FLAVOUR" = debian ]]; then
		CONFIG_FILE="/etc/apache2/sites-available/flaskapp.conf"
	elif [[ "$FLAVOUR" = redhat ]]; then
		CONFIG_FILE="/etc/httpd/conf.d/flaskapp.conf"
	fi

	sed 's/%APP_NAME%/'$APP_NAME'/g;s/%HOSTNAME%/'$cliqrNodeHostname'/g;s|%WEB_ROOT%|'$WEB_ROOT'|g;s/%USER%/apache/g' templates/apache-template.conf > "$CONFIG_FILE"

	# Enable the site if debian flavoured
	if [[ "$FLAVOUR" = debian ]]; then
		a2ensite flaskapp
	fi

	# Configure web root path
	mkdir -p $WEB_ROOT

	# Create wsgi file from template
	sed 's/%APP_NAME%/'$APP_NAME'/g;s/%HOSTNAME%/'$cliqrNodeHostname'/g;s|%WEB_ROOT%|'$WEB_ROOT'|g' templates/wsgi-template.wsgi > "$WEB_ROOT/$APP_NAME.wsgi"
	# Move python script(s) in to the same folder
	unzip -d "$WEB_ROOT" ./flaskapp.zip
}

startservice() {
	service $HTTPD_SERVICE start
}
stopservice() {
	service $HTTPD_SERVICE stop
}
restartservice() {
	service $HTTPD_SERVICE restart
}

# Switch through CLI args
case $1 in
	install)
		# Run installation script
		install
		;;
	configure)
		# Configuration script
		;;
	deploy)
		# Run deployment script - i.e. init the service
		deploy
		;;
	start)
		# Run startup script
		startservice
		;;
	stop)
		# Run stop script
		stopservice
		;;
	restart)
		# Run restart script
		restartservice
		;;
	reload)
		# Run reload script - don't have one so just restart
		restartservice
		;;
	cleanup)
		# Run cleanup
		;;
	upgrade)
		# Run upgrade
		upgrade
		;;
	*)
		# Unknown command
		;;
esac
